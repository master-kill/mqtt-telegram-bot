import json
import os
import time
import ssl
import paho.mqtt.client as mqtt
from send import send_message
from datetime import datetime

MQTT_BROKER = os.environ.get("MQTT_BROKER")
MQTT_PORT = int(os.environ.get("MQTT_PORT", 8883))
MQTT_USER = os.environ.get("MQTT_USER")
MQTT_PASS = os.environ.get("MQTT_PASS")
MQTT_TOPIC = os.environ.get("MQTT_TOPIC")

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
eng_state_map = {
    1: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
    2: "–ù–µ –≥–æ—Ç–æ–≤",
    6: "–ó–∞–ø—É—Å–∫",
    7: "–í —Ä–∞–±–æ—Ç–µ",
    8: "–ù–∞–≥—Ä—É–∂–µ–Ω–∞",
    9: "–†–∞–∑–≥—Ä—É–∑–∫–∞",
    10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
    11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞",
    15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
    19: "–ü—Ä–æ–≥—Ä–µ–≤"
}

controller_mode_map = {
    0: "OFF",
    1: "–†—É—á–Ω–æ–π",
    2: "–ê–í–¢–û",
    3: "–¢–µ—Å—Ç"
}


def format_data(payload: dict, timestamp: int) -> str:
    dt = datetime.fromtimestamp(timestamp).strftime('%d.%m.%Y %H:%M:%S')
    msg_lines = [f"üïí <b>{dt}</b>"]

    def row(icon, label, value, suffix=""):
        return f"{icon} <b>{label}:</b> {value}{suffix}"

    try:
        msg_lines.append(row("üîã", "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ", round(payload.get("battery_voltage", 0) / 10, 1), " –í"))
        msg_lines.append(row("‚ö†Ô∏è", "CommWarning", payload.get("CommWarning", "N/A")))
        msg_lines.append(row("‚õîÔ∏è", "CommShutdown", payload.get("CommShutdown", "N/A")))
        msg_lines.append(row("üü•", "CommBOC", payload.get("CommBOC", "N/A")))
        msg_lines.append(row("üê¢", "CommSlowStop", payload.get("CommSlowStop", "N/A")))
        msg_lines.append(row("üîå", "CommMainsProt", payload.get("CommMainsProt", "N/A")))
        msg_lines.append(row("üîã", "GeneratorP", payload.get("GeneratorP", "N/A"), " –∫–í—Ç"))
        msg_lines.append(row("üî¢", "Genset_kWh", payload.get("Genset_kWh", "N/A"), " –∫–í—Ç¬∑—á"))
        msg_lines.append(row("‚è≥", "RunningHours", round(payload.get("RunningHours", 0) / 10), " —á"))

        eng_state = payload.get("Eng_state")
        msg_lines.append(row("üö¶", "Eng_state", eng_state_map.get(eng_state, eng_state)))

        msg_lines.append(row("üå°Ô∏è", "HTin", round(payload.get("HTin", 0) / 10, 1), " ¬∞C"))
        msg_lines.append(row("üå°Ô∏è", "LTin", round(payload.get("LTin", 0) / 10, 1), " ¬∞C"))

        controller = payload.get("ControllerMode")
        msg_lines.append(row("üïπÔ∏è", "–†–µ–∂–∏–º", controller_mode_map.get(controller, controller)))

    except Exception as e:
        msg_lines.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    return "\n".join(msg_lines)


def on_connect(client, userdata, flags, rc):
    print(f"‚úÖ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –∫–æ–¥ {rc}")
    client.subscribe(MQTT_TOPIC)


def on_message(client, userdata, msg):
    try:
        payload_str = msg.payload.decode().strip()
        print(f"\n==> MQTT TOPIC: {msg.topic}")
        print(f"==> RAW PAYLOAD: {payload_str}")

        if not payload_str:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload")
            return

        data = json.loads(payload_str)

        if not isinstance(data, dict) or "payload" not in data:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON")
            return

        device_id = data.get("device_id", "Unknown")
        timestamp = data.get("timestamp", int(time.time()))
        payload = data["payload"]

        if not isinstance(payload, dict) or not payload:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π payload –≤–Ω—É—Ç—Ä–∏ JSON")
            return

        message = f"üì° <b>MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {device_id}</b>\n\n"
        message += format_data(payload, timestamp)

        send_message(message)

    except json.JSONDecodeError as e:
        print(f"‚ùå MQTT JSON ERROR: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def start_mqtt():
    mqtt_client = mqtt.Client()

    mqtt_client.username_pw_set(MQTT_USER, MQTT_PASS)
    mqtt_client.tls_set(cert_reqs=ssl.CERT_NONE)
    mqtt_client.tls_insecure_set(True)

    mqtt_client.on_connect = on_connect
    mqtt_client.on_message = on_message

    print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É {MQTT_BROKER}:{MQTT_PORT}...")
    mqtt_client.connect(MQTT_BROKER, MQTT_PORT, keepalive=60)

    mqtt_client.loop_forever()
