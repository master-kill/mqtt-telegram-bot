import os
import json
import ssl
import paho.mqtt.client as mqtt
import requests
from datetime import datetime, timezone, timedelta

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")
MQTT_BROKER = os.environ.get("MQTT_BROKER")
MQTT_PORT = int(os.environ.get("MQTT_PORT", 8883))
MQTT_USER = os.environ.get("MQTT_USER")
MQTT_PASS = os.environ.get("MQTT_PASS")
MQTT_TOPIC = os.environ.get("MQTT_TOPIC")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_eng_state = None
last_controller_mode = None
latest_status = None
last_status = None


def send_message(text):
    if BOT_TOKEN and CHAT_ID:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        requests.post(url, json={"chat_id": CHAT_ID, "text": text, "parse_mode": "Markdown"})


def format_message(device_id, payload, timestamp):
    tz = timezone(timedelta(hours=3))  # UTC+3
    try:
        formatted_time = datetime.fromtimestamp(timestamp, tz).strftime("%d.%m.%Y %H:%M:%S")
    except Exception:
        formatted_time = str(timestamp)

    eng_state_map = {
        1: "–ì–æ—Ç–æ–≤",
        2: "–ù–µ –≥–æ—Ç–æ–≤",
        6: "–ó–∞–ø—É—Å–∫",
        7: "–í —Ä–∞–±–æ—Ç–µ",
        8: "–ù–∞–≥—Ä—É–∂–µ–Ω",
        9: "–†–∞–∑–≥—Ä—É–∑–∫–∞",
        10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
        11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞",
        15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
        19: "–ü—Ä–æ–≥—Ä–µ–≤"
    }

    ControllerMode_map = {
        0: "OFF",
        1: "–†—É—á–Ω–æ–π",
        2: "–ê–í–¢–û",
        3: "–¢–µ—Å—Ç"
    }

    eng_state_code = int(payload.get("Eng_state", -1))
    controller_mode_code = int(payload.get("ControllerMode", -1))

    msg_lines = [
        f"üè≠ –û–±—ä–µ–∫—Ç: \t{device_id}",
        f"‚è±Ô∏è –í—Ä–µ–º—è: \t\t{formatted_time}",
        "",  # <-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        f"üïπÔ∏è –†–µ–∂–∏–º:\t\t\t\t\t\t\t\t\t\t\t {ControllerMode_map.get(controller_mode_code, f'–∫–æ–¥ {controller_mode_code}')}",
        f"üö¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: \t{eng_state_map.get(eng_state_code, f'–∫–æ–¥ {eng_state_code}')}",      
        "",  # <-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞        
        f"‚ö°Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {payload.get('GeneratorP')} –∫–í—Ç",
        f"üî¢ –°—á—ë—Ç—á–∏–∫:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {payload.get('Genset_kWh')} –∫–í—Ç¬∑—á",
        f"‚è≥ –ù–∞—Ä–∞–±–æ—Ç–∫–∞:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {round(payload.get('RunningHours', 0) / 10)} —á",
        f"üîã –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∞–∫–±:\t\t\t\t {round(payload.get('battery_voltage', 0) / 10, 1)} –í",
        f"üå°Ô∏è –í—Ö–æ–¥ –≤ –º–æ—Ç–æ—Ä:\t\t\t\t\t\t\t\t\t\t\t {round(payload.get('HTin', 0) / 10, 1)} ¬∞C",
        f"üå°Ô∏è –í—Ö–æ–¥ –≤ –º–∏–∫—Å–∫—É–ª–µ—Ä:\t\t {round(payload.get('LTin', 0) / 10, 1)} ¬∞C",
        "",  # <-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        f"‚ö†Ô∏è CommWarning: {payload.get('CommWarning')}",
        f"‚õîÔ∏è CommShutdown: {payload.get('CommShutdown')}",
        f"üü• CommBOC: {payload.get('CommBOC')}",
        f"üê¢ CommSlowStop: {payload.get('CommSlowStop')}",
        f"üîå CommMainsProt: {payload.get('CommMainsProt')}"
    ]


    return "\n".join(msg_lines)


def on_connect(client, userdata, flags, rc):
    print("‚úÖ Connected to MQTT Broker:", rc)
    client.subscribe(MQTT_TOPIC)


def on_message(client, userdata, msg):
    global last_eng_state, last_controller_mode, latest_status

    print(f"==> MQTT TOPIC: {msg.topic}")
    print(f"==> RAW PAYLOAD: {msg.payload.decode()}")

    try:
        data = json.loads(msg.payload.decode())
    except Exception as e:
        print(f"MQTT ERROR: {e}")
        return

    if not isinstance(data, dict):
        return

    device_id = data.get("device_id", "unknown")
    timestamp = data.get("timestamp")
    payload = data.get("payload", {})

    if not isinstance(payload, dict) or not payload or payload == {0}:
        return

    eng_state = int(payload.get("Eng_state", -1))
    controller_mode = int(payload.get("ControllerMode", -1))

    text = format_message(device_id, payload, timestamp)
    latest_status = text  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è /status

    # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if eng_state != last_eng_state or controller_mode != last_controller_mode:
        last_eng_state = eng_state
        last_controller_mode = controller_mode
        send_message(text)
        
    if valid_payload:  # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        last_status = text  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_message(text)

def start_mqtt():
    client = mqtt.Client()
    client.username_pw_set(MQTT_USER, MQTT_PASS)
    client.tls_set(cert_reqs=ssl.CERT_NONE)
    client.tls_insecure_set(True)

    client.on_connect = on_connect
    client.on_message = on_message

    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_forever()
