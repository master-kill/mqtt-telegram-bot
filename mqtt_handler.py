import os
import json
import time
import paho.mqtt.client as mqtt
import requests

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.environ.get('BOT_TOKEN')
CHAT_ID = os.environ.get('CHAT_ID')
MQTT_BROKER = os.environ.get('MQTT_BROKER')
MQTT_PORT = int(os.environ.get('MQTT_PORT', 1883))
MQTT_USER = os.environ.get('MQTT_USER')
MQTT_PASS = os.environ.get('MQTT_PASS')
MQTT_TOPIC = os.environ.get('MQTT_TOPIC')


def send_telegram_message(text):
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    payload = {
        'chat_id': CHAT_ID,
        'text': text,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, json=payload)
        print(f"‚úÖ Telegram sent: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Telegram error: {e}")


def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ MQTT connected.")
        client.subscribe(MQTT_TOPIC)
    else:
        print(f"‚ùå MQTT connect failed with code {rc}")


def on_message(client, userdata, msg):
    try:
        raw = msg.payload.decode()
        print(f"\n==> MQTT TOPIC: {msg.topic}")
        print(f"==> RAW PAYLOAD: {raw}")

        payload = json.loads(raw)
        device_id = payload.get("device_id", "unknown")
        timestamp = payload.get("timestamp", int(time.time()))
        data = payload.get("payload", {})

        # ‚õî –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç–æ–≥–æ payload
        if not isinstance(data, dict) or not data:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        icon_map = {
            "battery_voltage": "üîã –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∞–∫–±",
            "CommWarning": "‚ö†Ô∏è CommWarning",
            "CommShutdown": "‚õîÔ∏è CommShutdown",
            "CommBOC": "üü• CommBOC",
            "CommSlowStop": "üê¢ CommSlowStop",
            "CommMainsProt": "üîå CommMainsProt",
            "GeneratorP": "‚ö°Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞ P",
            "Genset_kWh": "üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —ç.—ç.",
            "RunningHours": "‚è≥ –ú–æ—Ç–æ—á–∞—Å—ã",
            "Eng_state": "üö¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ",
            "HTin": "üå°Ô∏è –í—Ö–æ–¥ –≤ –º–æ—Ç–æ—Ä....",
            "LTin": "üå°Ô∏è –í—Ö–æ–¥ –≤ –º–∏–∫—Å–∫—É–ª–µ—Ä"
        }

        def format_value(key, val):
            try:
                val = float(val)

                eng_state_map = {
                    1: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
                    2: "–ù–µ –≥–æ—Ç–æ–≤",
                    6: "–ó–∞–ø—É—Å–∫",
                    7: "–í —Ä–∞–±–æ—Ç–µ",
                    8: "–ù–∞–≥—Ä—É–∂–µ–Ω–∞",
                    9: "–†–∞–∑–≥—Ä—É–∑–∫–∞",
                    10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
                    11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞",
                    15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
                    19: "–ü—Ä–æ–≥—Ä–µ–≤"
                }

                if key == "battery_voltage":
                    return f"{val / 10:.1f} –í"
                elif key == "RunningHours":
                    return f"{int(val / 10)} —á"
                elif key in ["HTin", "LTin"]:
                    return f"{val / 10:.1f} ¬∞C"
                elif key == "GeneratorP":
                    return f"{int(val)} –∫–í—Ç"
                elif key == "Genset_kWh":
                    return f"{int(val)} –∫–í—Ç¬∑—á"
                elif key == "Eng_state":
                    return eng_state_map.get(int(val), f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({int(val)})")
                else:
                    return str(int(val)) if val.is_integer() else str(val)
            except:
                return str(val)

        lines = [
            f"<b>üì° {device_id}</b>",
            f"‚è±Ô∏è {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(timestamp))}",
            "",
            f"üîß <b>–ü–æ–∫–∞–∑–∞–Ω–∏—è:</b>"
        ]

        for key, value in data.items():
            label = icon_map.get(key, key)
            formatted = format_value(key, value)
            lines.append(f"{label}: <code>{formatted}</code>")

        send_telegram_message('\n'.join(lines))

    except Exception as e:
        print(f"‚ùå MQTT ERROR: {e}")


def start_mqtt():
    mqtt_client = mqtt.Client()
    mqtt_client.username_pw_set(MQTT_USER, MQTT_PASS)
    mqtt_client.on_connect = on_connect
    mqtt_client.on_message = on_message
    mqtt_client.connect(MQTT_BROKER, MQTT_PORT, 60)
    mqtt_client.loop_forever()
