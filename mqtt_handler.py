import os
import json
import ssl
import paho.mqtt.client as mqtt
import requests
from datetime import datetime

BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")
MQTT_BROKER = os.environ.get("MQTT_BROKER")
MQTT_PORT = int(os.environ.get("MQTT_PORT", 8883))
MQTT_USER = os.environ.get("MQTT_USER")
MQTT_PASS = os.environ.get("MQTT_PASS")
MQTT_TOPIC = os.environ.get("MQTT_TOPIC")


def send_message(text):
    if BOT_TOKEN and CHAT_ID:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        requests.post(url, json={"chat_id": CHAT_ID, "text": text})


def on_connect(client, userdata, flags, rc):
    print("‚úÖ Connected to MQTT Broker:", rc)
    client.subscribe(MQTT_TOPIC)


def on_message(client, userdata, msg):
    print(f"==> MQTT TOPIC: {msg.topic}")
    print(f"==> RAW PAYLOAD: {msg.payload.decode()}")
    try:
        data = json.loads(msg.payload.decode())
    except Exception as e:
        print(f"MQTT ERROR: {e}")
        return

    if not isinstance(data, dict):
        return

    device_id = data.get("device_id", "unknown")
    timestamp = data.get("timestamp")
    payload = data.get("payload", {})

    if not isinstance(payload, dict) or len(payload) < 3:
        return

    # –ß–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
    if timestamp:
        try:
            formatted_time = datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y %H:%M:%S")
        except Exception:
            formatted_time = str(timestamp)
    else:
        formatted_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    eng_state_map = {
        1: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
        2: "–ù–µ –≥–æ—Ç–æ–≤",
        6: "–ó–∞–ø—É—Å–∫",
        7: "–í —Ä–∞–±–æ—Ç–µ",
        8: "–ù–∞–≥—Ä—É–∂–µ–Ω–∞",
        9: "–†–∞–∑–≥—Ä—É–∑–∫–∞",
        10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
        11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞",
        15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
        19: "–ü—Ä–æ–≥—Ä–µ–≤"
    }

    ControllerMode_map = {
        0: "OFF",
        1: "–†—É—á–Ω–æ–π",
        2: "–ê–í–¢–û",
        3: "–¢–µ—Å—Ç"
    }

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    def get_scaled(key, scale=1, digits=0):
        try:
            val = payload.get(key)
            return round(float(val) / scale, digits) if val is not None else "‚Äî"
        except:
            return "‚Äî"

    eng_state_code = int(payload.get("Eng_state", -1))
    controller_mode_code = int(payload.get("ControllerMode", -1))

    msg = f"""
üì° *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ*: `{device_id}`
‚è±Ô∏è *–í—Ä–µ–º—è*: `{formatted_time}`

```
–ü–∞—Ä–∞–º–µ—Ç—Ä            –ó–Ω–∞—á–µ–Ω–∏–µ
-----------------------------
üîã –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∞–∫–±:  {get_scaled('battery_voltage', 10, 1)} –í
‚ö°Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞        {payload.get('GeneratorP')} –∫–í—Ç
üî¢ –°—á—ë—Ç—á–∏–∫          {payload.get('Genset_kWh')} –∫–í—Ç¬∑—á
‚è≥ –ù–∞—Ä–∞–±–æ—Ç–∫–∞        {get_scaled('RunningHours', 10)} —á
üïπÔ∏è –†–µ–∂–∏–º            {controller_mode_map.get(controller_mode_code, f'–∫–æ–¥ {controller_mode_code}')}
üö¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ        {eng_state_map.get(eng_state_code, f'–∫–æ–¥ {eng_state_code}')}
üå°Ô∏è –í—Ö–æ–¥ –≤ –º–æ—Ç–æ—Ä     {get_scaled('HTin', 10, 1)} ¬∞C
üå°Ô∏è –í—Ö–æ–¥ –≤ –º–∏–∫—Å–∫—É–ª–µ—Ä {get_scaled('LTin', 10, 1)} ¬∞C
‚ö†Ô∏è CommWarning      {payload.get('CommWarning')}
‚õîÔ∏è CommShutdown     {payload.get('CommShutdown')}
üü• CommBOC          {payload.get('CommBOC')}
üê¢ CommSlowStop     {payload.get('CommSlowStop')}
üîå CommMainsProt    {payload.get('CommMainsProt')}
```
"""
    return msg

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    client.subscribe(MQTT_TOPIC)

def on_message(client, userdata, msg):
    try:
        print(f"==> MQTT TOPIC: {msg.topic}")
        payload = json.loads(msg.payload.decode())

        if isinstance(payload, dict):
            data = next(iter(payload.values()), {})
            if isinstance(data, str):
                data = json.loads(data)

            if isinstance(data, dict) and "payload" in data and isinstance(data["payload"], dict):
                if data["payload"] == {0} or not data["payload"]:
                    print("==> –ü—É—Å—Ç–æ–π payload, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    return

                text = format_payload(data.get("device_id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"), data["payload"], int(data.get("timestamp", time.time())))
                send_message(text)
            else:
                print("==> –°—Ç—Ä—É–∫—Ç—É—Ä–∞ payload –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("==> –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        print("MQTT ERROR:", e)










def start_mqtt():
    client = mqtt.Client()
    client.username_pw_set(MQTT_USER, MQTT_PASS)
    client.tls_set(cert_reqs=ssl.CERT_NONE)
    client.tls_insecure_set(True)

    client.on_connect = on_connect
    client.on_message = on_message

    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_forever()
