import os
import json
import time
import ssl
import paho.mqtt.client as mqtt
from datetime import datetime
from send import send_message

MQTT_BROKER = os.environ.get('MQTT_BROKER')
MQTT_PORT = int(os.environ.get('MQTT_PORT', 8883))
MQTT_USER = os.environ.get('MQTT_USER')
MQTT_PASS = os.environ.get('MQTT_PASS')
MQTT_TOPIC = os.environ.get('MQTT_TOPIC')
BOT_TOKEN = os.environ.get('BOT_TOKEN')
CHAT_ID = os.environ.get('CHAT_ID')

def format_payload(device_id, payload, timestamp):
    def get_scaled(key, factor, precision=0):
        try:
            value = float(payload.get(key, 0)) / factor
            return f"{value:.{precision}f}"
        except Exception:
            return "–Ω/–¥"

    eng_state_map = {
        1: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
        2: "–ù–µ –≥–æ—Ç–æ–≤",
        6: "–ó–∞–ø—É—Å–∫",
        7: "–í —Ä–∞–±–æ—Ç–µ",
        8: "–ù–∞–≥—Ä—É–∂–µ–Ω–∞",
        9: "–†–∞–∑–≥—Ä—É–∑–∫–∞",
        10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
        11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞",
        15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
        19: "–ü—Ä–æ–≥—Ä–µ–≤"
    }

    controller_mode_map = {
        0: "OFF",
        1: "–†—É—á–Ω–æ–π",
        2: "–ê–í–¢–û",
        3: "–¢–µ—Å—Ç"
    }

    try:
        eng_state_code = int(payload.get("Eng_state", -1))
        controller_mode_code = int(payload.get("ControllerMode", -1))
    except Exception:
        eng_state_code = controller_mode_code = -1

    formatted_time = datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y %H:%M:%S")

    msg = f"""
üì° *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ*: `{device_id}`
‚è±Ô∏è *–í—Ä–µ–º—è*: `{formatted_time}`

```
–ü–∞—Ä–∞–º–µ—Ç—Ä            –ó–Ω–∞—á–µ–Ω–∏–µ
-----------------------------
üîã –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ       {get_scaled('battery_voltage', 10, 1)} –í
‚ö°Ô∏è –ú–æ—â–Ω–æ—Å—Ç—å         {payload.get('GeneratorP')} –∫–í—Ç
üî¢ –°—á—ë—Ç—á–∏–∫          {payload.get('Genset_kWh')} –∫–í—Ç¬∑—á
‚è≥ –ù–∞—Ä–∞–±–æ—Ç–∫–∞        {get_scaled('RunningHours', 10)} —á
üö¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ        {eng_state_map.get(eng_state_code, f'–∫–æ–¥ {eng_state_code}')}
üïπÔ∏è –†–µ–∂–∏–º            {controller_mode_map.get(controller_mode_code, f'–∫–æ–¥ {controller_mode_code}')}
üå°Ô∏è HTin             {get_scaled('HTin', 10, 1)} ¬∞C
üå°Ô∏è LTin             {get_scaled('LTin', 10, 1)} ¬∞C
‚ö†Ô∏è CommWarning      {payload.get('CommWarning')}
‚õîÔ∏è CommShutdown     {payload.get('CommShutdown')}
üü• CommBOC          {payload.get('CommBOC')}
üê¢ CommSlowStop     {payload.get('CommSlowStop')}
üîå CommMainsProt    {payload.get('CommMainsProt')}
```
"""
    return msg

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    client.subscribe(MQTT_TOPIC)

def on_message(client, userdata, msg):
    try:
        print(f"==> MQTT TOPIC: {msg.topic}")
        payload = json.loads(msg.payload.decode())

        if isinstance(payload, dict):
            data = next(iter(payload.values()), {})
            if isinstance(data, str):
                data = json.loads(data)

            if isinstance(data, dict) and "payload" in data and isinstance(data["payload"], dict):
                if data["payload"] == {0} or not data["payload"]:
                    print("==> –ü—É—Å—Ç–æ–π payload, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    return

                text = format_payload(data.get("device_id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"), data["payload"], int(data.get("timestamp", time.time())))
                send_message(text)
            else:
                print("==> –°—Ç—Ä—É–∫—Ç—É—Ä–∞ payload –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("==> –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        print("MQTT ERROR:", e)

def start_mqtt():
    mqtt_client = mqtt.Client()
    mqtt_client.username_pw_set(MQTT_USER, MQTT_PASS)
    mqtt_client.tls_set(cert_reqs=ssl.CERT_NONE)
    mqtt_client.tls_insecure_set(True)

    mqtt_client.on_connect = on_connect
    mqtt_client.on_message = on_message

    mqtt_client.connect(MQTT_BROKER, MQTT_PORT, 60)
    mqtt_client.loop_forever()
