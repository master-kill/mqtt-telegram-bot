import os
import logging
from telegram import Update, Bot
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    DispatcherHandlerStop
)
from data_store import (
    latest_data,
    previous_states,
    get_subscriptions,
    add_subscription,
    remove_subscription,
    add_state_subscription,
    add_state_subscriptions,
    get_subscribed_states,
    get_all_subscribers
)
from formatter import format_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ö–∞—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATE_MAP = {
    1: "–ì–æ—Ç–æ–≤",
    2: "–ù–µ –≥–æ—Ç–æ–≤",
    6: "–ó–∞–ø—É—Å–∫",
    7: "–í —Ä–∞–±–æ—Ç–µ",
    8: "–ù–∞–≥—Ä—É–∂–µ–Ω",
    9: "–†–∞–∑–≥—Ä—É–∑–∫–∞",
    10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
    11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞",
    15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
    19: "–ü—Ä–æ–≥—Ä–µ–≤"
}

def error_handler(update: Update, context: CallbackContext):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        raise context.error
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}', exc_info=True)
    raise DispatcherHandlerStop()

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/subscribe <device_id> - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
            "/subscribe_state <device_id> <–∫–æ–¥> - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
            "/subscribe_states <device_id> <–∫–æ–¥—ã> - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π\n"
            "/list_states - —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π\n"
            "/unsubscribe <device_id> - –æ—Ç–ø–∏—Å–∫–∞\n"
            "/my - –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

def subscribe(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
    try:
        chat_id = update.effective_chat.id
        if len(context.args) != 1:
            update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /subscribe <device_id>")
            return

        device_id = context.args[0]
        if device_id not in latest_data:
            update.message.reply_text(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        if add_subscription(chat_id, device_id):
            update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /subscribe: {e}")

def unsubscribe(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
    try:
        chat_id = update.effective_chat.id
        if len(context.args) != 1:
            update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /unsubscribe <device_id>")
            return

        device_id = context.args[0]
        if remove_subscription(chat_id, device_id):
            update.message.reply_text(f"üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} —É–¥–∞–ª–µ–Ω–∞")
        else:
            update.message.reply_text(f"‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {device_id} –∏–ª–∏ –æ—à–∏–±–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /unsubscribe: {e}")

def subscribe_state(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe_state"""
    try:
        chat_id = update.effective_chat.id
        if len(context.args) != 2:
            update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /subscribe_state <device_id> <–∫–æ–¥>")
            return

        device_id, state_code = context.args[0], context.args[1]
        try:
            state_code = int(state_code)
            if state_code not in STATE_MAP:
                raise ValueError
        except ValueError:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            return

        if add_state_subscription(chat_id, device_id, state_code):
            update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_MAP[state_code]} ({state_code}) –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /subscribe_state: {e}")

def subscribe_states(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe_states"""
    try:
        chat_id = update.effective_chat.id
        if len(context.args) < 2:
            update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /subscribe_states <device_id> <–∫–æ–¥—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>")
            return

        device_id = context.args[0]
        try:
            state_codes = [int(code.strip()) for code in context.args[1].split(',')]
            invalid_codes = [code for code in state_codes if code not in STATE_MAP]
            
            if invalid_codes:
                update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã: {', '.join(map(str, invalid_codes))}")
                return

            if add_state_subscriptions(chat_id, device_id, state_codes):
                state_names = [f"{code} ({STATE_MAP[code]})" for code in state_codes]
                update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –Ω–∞: {', '.join(state_names)}")
            else:
                update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
        except ValueError:
            update.message.reply_text("‚ùå –ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /subscribe_states: {e}")

def list_states(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_states"""
    try:
        message = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:\n" + \
            "\n".join([f"{code}: {name}" for code, name in STATE_MAP.items()])
        update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /list_states: {e}")

def my_subscriptions(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my"""
    try:
        chat_id = update.effective_chat.id
        subs = get_subscriptions(chat_id)
        
        if not subs:
            update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        message = ["üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:"]
        for device_id in subs:
            states = get_subscribed_states(chat_id, device_id)
            if states:
                state_list = ", ".join(f"{code} ({STATE_MAP.get(code, '?')})" for code in states)
                message.append(f"üîπ {device_id}: {state_list}")
            else:
                message.append(f"üîπ {device_id}: –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        
        update.message.reply_text("\n".join(message))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /my: {e}")

def status(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        chat_id = update.effective_chat.id
        subs = get_subscriptions(chat_id)
        if not subs:
            update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        messages = []
        for device_id in subs:
            data = latest_data.get(device_id)
            if data:
                msg = format_message(device_id, data["timestamp"], data["payload"])
                messages.append(msg)

        if messages:
            for m in messages:
                update.message.reply_text(m, parse_mode='Markdown')
        else:
            update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")

def notify_subscribers(device_id, timestamp, payload):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
    try:
        bot = Bot(token=BOT_TOKEN)
        msg = format_message(device_id, timestamp, payload)
        current_state = payload.get("Eng_state")

        for chat_id in get_all_subscribers(device_id):
            subscribed_states = get_subscribed_states(chat_id, device_id)
            prev_state = previous_states.get(f"{chat_id}:{device_id}", {}).get("Eng_state")

            should_notify = (
                (not subscribed_states and current_state != prev_state) or
                (current_state in subscribed_states)
            )

            if should_notify:
                try:
                    bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id} –¥–ª—è {device_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")

        previous_states[f"{chat_id}:{device_id}"] = {"Eng_state": current_state}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_subscribers: {e}")

def stop_bot(updater):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    try:
        if updater.running:
            updater.stop()
            updater.is_idle = False
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        updater = Updater(BOT_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        dp.add_error_handler(error_handler)
        
        handlers = [
            CommandHandler("start", start),
            CommandHandler("subscribe", subscribe),
            CommandHandler("subscribe_state", subscribe_state),
            CommandHandler("subscribe_states", subscribe_states),
            CommandHandler("list_states", list_states),
            CommandHandler("unsubscribe", unsubscribe),
            CommandHandler("my", my_subscriptions),
            CommandHandler("status", status)
        ]
        
        for handler in handlers:
            dp.add_handler(handler)
        
        updater.bot.delete_webhook(drop_pending_updates=True)
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        updater.start_polling(
            timeout=15,
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        return updater
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise
