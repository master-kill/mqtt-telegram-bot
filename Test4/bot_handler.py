import os
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
from data_store import (
    latest_data,
    add_subscription,
    remove_subscription,
    get_subscribed_states,
    add_state_subscription,
    get_all_subscribers,
    previous_states
)
from formatter import format_message

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
STATE_MAP = {
    1: "–ì–æ—Ç–æ–≤", 2: "–ù–µ –≥–æ—Ç–æ–≤", 6: "–ó–∞–ø—É—Å–∫", 7: "–í —Ä–∞–±–æ—Ç–µ",
    8: "–ù–∞–≥—Ä—É–∂–µ–Ω", 9: "–†–∞–∑–≥—Ä—É–∑–∫–∞", 10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
    11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞", 15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è", 19: "–ü—Ä–æ–≥—Ä–µ–≤"
}

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/subscribe <device_id> - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        "/subscribe_state <device_id> <–∫–æ–¥> - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "/list_states - —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π\n"
        "/unsubscribe <device_id> - –æ—Ç–ø–∏—Å–∫–∞\n"
        "/my - –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
    )

def subscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if len(context.args) != 1:
        update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /subscribe <device_id>")
        return

    device_id = context.args[0]
    if add_subscription(chat_id, device_id):
        update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
    else:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")

def subscribe_state(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if len(context.args) != 2:
        update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç: /subscribe_state <device_id> <–∫–æ–¥_—Å–æ—Å—Ç–æ—è–Ω–∏—è>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_states –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–¥–æ–≤"
        )
        return

    device_id, state_code = context.args[0], context.args[1]
    try:
        state_code = int(state_code)
        if state_code not in STATE_MAP:
            raise ValueError
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        return

    if add_state_subscription(chat_id, device_id, state_code):
        update.message.reply_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_MAP[state_code]} ({state_code}) –¥–ª—è {device_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞"
        )
    else:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")

def list_states(update: Update, context: CallbackContext):
    message = "üìã –ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:\n" + \
        "\n".join([f"{code}: {name}" for code, name in STATE_MAP.items()])
    update.message.reply_text(message)

def notify_subscribers(device_id, timestamp, payload):
    bot = Bot(token=BOT_TOKEN)
    msg = format_message(device_id, timestamp, payload)
    current_state = payload.get("Eng_state")

    for chat_id in get_all_subscribers(device_id):
        subscribed_states = get_subscribed_states(chat_id, device_id)
        prev_state = previous_states.get(f"{chat_id}:{device_id}", {}).get("Eng_state")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏:
        # 1. –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        # 2. –ï—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ò —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        should_notify = (
            (not subscribed_states and current_state != prev_state) or
            (current_state in subscribed_states)
        )

        if should_notify:
            try:
                bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
            except Exception as e:
                print(f"Send error to {chat_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    previous_states[f"{chat_id}:{device_id}"] = {"Eng_state": current_state}

def start_bot():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("subscribe_state", subscribe_state))
    dp.add_handler(CommandHandler("list_states", list_states))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))
    dp.add_handler(CommandHandler("my", my_subscriptions))
    dp.add_handler(CommandHandler("status", status))

    updater.start_polling()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.idle()
