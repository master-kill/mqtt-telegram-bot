import os
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
from data_store import latest_data, get_subscriptions, add_subscription, remove_subscription, get_all_subscribers
from formatter import format_message

BOT_TOKEN = os.getenv("BOT_TOKEN")

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/subscribe <device_id> ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        "/unsubscribe <device_id> ‚Äî –æ—Ç–ø–∏—Å–∫–∞\n"
        "/my ‚Äî –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    )

def subscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if len(context.args) != 1:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: /subscribe <device_id>")
        return

    device_id = context.args[0]

    if device_id not in latest_data:
        update.message.reply_text(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    if add_subscription(chat_id, device_id):
        update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
    else:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if len(context.args) != 1:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: /unsubscribe <device_id>")
        return

    device_id = context.args[0]
    if remove_subscription(chat_id, device_id):
        update.message.reply_text(f"üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} —É–¥–∞–ª–µ–Ω–∞")
    else:
        update.message.reply_text(f"‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {device_id} –∏–ª–∏ –æ—à–∏–±–∫–∞")

def my_subscriptions(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subs = get_subscriptions(chat_id)
    if not subs:
        update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        update.message.reply_text("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(f"‚Ä¢ {s}" for s in subs))

def status(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subs = get_subscriptions(chat_id)
    if not subs:
        update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    messages = []
    for device_id in subs:
        data = latest_data.get(device_id)
        if data:
            msg = format_message(device_id, data["timestamp"], data["payload"])
            messages.append(msg)

    if messages:
        for m in messages:
            update.message.reply_text(m, parse_mode='Markdown')
    else:
        update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")

def notify_subscribers(device_id, timestamp, payload):
    bot = Bot(token=BOT_TOKEN)
    msg = format_message(device_id, timestamp, payload)

    current_eng_state = payload.get("Eng_state")
    prev_state = previous_states.get(device_id, {}).get("Eng_state")

    if current_eng_state != prev_state:
        for chat_id in get_all_subscribers(device_id):
            try:
                bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")

def start_bot():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))
    dp.add_handler(CommandHandler("my", my_subscriptions))
    dp.add_handler(CommandHandler("status", status))

    updater.start_polling()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.idle()
