import os
import json
import ssl
import logging
import paho.mqtt.client as mqtt
from bot_handler import notify_subscribers
from data_store import latest_data, previous_states

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MQTT
MQTT_BROKER = os.getenv("MQTT_BROKER")
MQTT_PORT = int(os.getenv("MQTT_PORT", 8883))
MQTT_USER = os.getenv("MQTT_USER")
MQTT_PASS = os.getenv("MQTT_PASS")
MQTT_TOPIC = os.getenv("MQTT_TOPIC", "telto/devices/#")

# –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ payload
REQUIRED_KEYS = [
    "battery_voltage", "CommWarning", "CommShutdown", "CommBOC", 
    "CommSlowStop", "CommMainsProt", "GeneratorP", "Genset_kWh",
    "RunningHours", "Eng_state", "ControllerMode", "T_CoolantIn",
    "P_CoolantDiff", "T_IntakeAirA", "P_Oil", "P_Crankcase",
    "T_BearingDE", "T_BearingNDE", "LT_eng_in", "LTafterTKLT",
    "HTafterTKHT", "LT_Speed", "HT_Speed", "GenRoomInT",
    "GenRoomOutT", "OilRefilCounter"
]

def on_connect(client, userdata, flags, rc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É"""
    if rc == 0:
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")
        client.subscribe(MQTT_TOPIC)
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: –∫–æ–¥ {rc}")

def on_message(client, userdata, msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö MQTT —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        payload_raw = msg.payload.decode('utf-8')
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ: {payload_raw}")

        # –ü–∞—Ä—Å–∏–º JSON
        try:
            data = json.loads(payload_raw)
            if not isinstance(data, dict):
                raise ValueError("Payload –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        device_id = data.get("device_id")
        payload = data.get("payload")
        timestamp = data.get("timestamp")

        if not all([device_id, isinstance(payload, dict), timestamp]):
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: device_id, payload –∏–ª–∏ timestamp")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ payload
        missing_keys = [key for key in REQUIRED_KEYS if key not in payload]
        if missing_keys:
            logger.error(f"‚ùå –í payload –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing_keys}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "nodata"
        if "nodata" in payload:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ nodata –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        latest_data[device_id] = {
            "timestamp": timestamp,
            "payload": payload
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = payload.get("Eng_state")
        prev_state = previous_states.get(device_id, {}).get("Eng_state")

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        logger.info(f"üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id}. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {prev_state} -> {current_state}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if current_state != prev_state:
            logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É {device_id}")
            notify_subscribers(device_id, timestamp, payload)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        previous_states[device_id] = {"Eng_state": current_state}

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MQTT: {e}", exc_info=True)

def on_disconnect(client, userdata, rc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç MQTT –±—Ä–æ–∫–µ—Ä–∞"""
    if rc != 0:
        logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MQTT. –ö–æ–¥: {rc}")
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT...")

def start_mqtt():
    """–ó–∞–ø—É—Å–∫ MQTT –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MQTT –∫–ª–∏–µ–Ω—Ç–∞...")
        
        client = mqtt.Client()
        client.username_pw_set(MQTT_USER, MQTT_PASS)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TLS
        client.tls_set(
            cert_reqs=ssl.CERT_NONE,
            tls_version=ssl.PROTOCOL_TLS
        )
        client.tls_insecure_set(True)
        
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        client.on_connect = on_connect
        client.on_message = on_message
        client.on_disconnect = on_disconnect
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {MQTT_BROKER}:{MQTT_PORT}...")
        client.connect(MQTT_BROKER, MQTT_PORT, 60)
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        client.loop_forever()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MQTT: {e}")
        raise
