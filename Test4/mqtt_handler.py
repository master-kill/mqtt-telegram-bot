import os
import json
import ssl
import logging
import paho.mqtt.client as mqtt
from bot_handler import notify_subscribers  # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
from data_store import latest_data, previous_states

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

MQTT_BROKER = os.getenv("MQTT_BROKER")
MQTT_PORT = int(os.getenv("MQTT_PORT", 8883))
MQTT_USER = os.getenv("MQTT_USER")
MQTT_PASS = os.getenv("MQTT_PASS")
MQTT_TOPIC = os.getenv("MQTT_TOPIC", "telto/devices/#")

def on_connect(client, userdata, flags, rc):
    print("‚úÖ MQTT –ø–æ–¥–∫–ª—é—á—ë–Ω —Å –∫–æ–¥–æ–º:", rc)
    client.subscribe(MQTT_TOPIC)

def on_message(client, userdata, msg):
    try:
        payload_raw = msg.payload.decode()
        print("üì• RAW PAYLOAD:", payload_raw)

        payload_json = json.loads(payload_raw)

        if not isinstance(payload_json, dict):
            print("‚ùå MQTT: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.")
            return

        device_id = payload_json.get("device_id")
        payload = payload_json.get("payload")
        timestamp = payload_json.get("timestamp")

        if not device_id or not isinstance(payload, dict):
            return

        if "nodata" in payload:
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        if not all(key in payload for key in required_keys):
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ –≤—Å–µ –∫–ª—é—á–∏ –≤ payload.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        latest_data[device_id] = {
            "timestamp": timestamp,
            "payload": payload
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_eng_state = payload.get("Eng_state")
        prev_state = previous_states.get(device_id, {}).get("Eng_state")

        if current_eng_state != prev_state:
            previous_states[device_id] = {"Eng_state": current_eng_state}
            notify_subscribers(device_id, timestamp, payload)
        else:
            print(f"‚ÑπÔ∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π Eng_state: {current_eng_state}")

    except Exception as e:
        print("‚ùå MQTT ERROR:", e)

def on_disconnect(client, userdata, rc):
    print("MQTT disconnected, retrying...")
    time.sleep(5)
    client.reconnect()

def start_mqtt():
    client = mqtt.Client()
    client.username_pw_set(MQTT_USER, MQTT_PASS)
    client.tls_set(cert_reqs=ssl.CERT_NONE)
    client.tls_insecure_set(True)

    client.on_connect = on_connect
    client.on_message = on_message
    client.on_disconnect = on_disconnect

    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_forever()
