from datetime import datetime, timezone, timedelta

def format_message(device_id, timestamp, payload):
    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    eng_state_map = {
        1: "–ì–æ—Ç–æ–≤",
        2: "–ù–µ –≥–æ—Ç–æ–≤",
        6: "–ó–∞–ø—É—Å–∫",
        7: "–í —Ä–∞–±–æ—Ç–µ",
        8: "–ù–∞–≥—Ä—É–∂–µ–Ω",
        9: "–†–∞–∑–≥—Ä—É–∑–∫–∞",
        10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
        11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞",
        15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
        19: "–ü—Ä–æ–≥—Ä–µ–≤"
    }

    controller_mode_map = {
        0: "OFF",
        1: "–†—É—á–Ω–æ–π",
        2: "–ê–í–¢–û",
        3: "–¢–µ—Å—Ç"
    }

    # –í—Ä–µ–º—è
    if timestamp:
        try:
            tz = timezone(timedelta(hours=3))  # UTC+3
            formatted_time = datetime.fromtimestamp(timestamp, tz).strftime("%d.%m.%Y %H:%M:%S")
        except:
            formatted_time = str(timestamp)
    else:
        formatted_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    def get_scaled(key, scale=1, digits=0):
        try:
            val = payload.get(key)
            return round(float(val) / scale, digits) if val is not None else "‚Äî"
        except:
            return "‚Äî"

    eng_state_code = int(payload.get("Eng_state", -1))
    controller_mode_code = int(payload.get("ControllerMode", -1))

    msg_lines = [
        f"üè≠ –û–±—ä–µ–∫—Ç: \t{device_id}",
        f"‚è±Ô∏è –í—Ä–µ–º—è: \t\t{formatted_time}",
        "",  # <-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        f"üïπÔ∏è –†–µ–∂–∏–º:\t\t\t\t\t\t\t\t\t\t\t {controllermode_map.get(controller_mode_code, f'–∫–æ–¥ {controller_mode_code}')}",
        f"üö¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: \t{eng_state_map.get(eng_state_code, f'–∫–æ–¥ {eng_state_code}')}",      
        "",  # <-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞        
        f"‚ö°Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {payload.get('GeneratorP')} –∫–í—Ç",
        f"üî¢ –°—á—ë—Ç—á–∏–∫:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {payload.get('Genset_kWh')} –∫–í—Ç¬∑—á",
        f"‚è≥ –ù–∞—Ä–∞–±–æ—Ç–∫–∞:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {round(payload.get('RunningHours', 0) / 10)} —á",
        f"üîã –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∞–∫–±:\t\t\t\t {round(payload.get('battery_voltage', 0) / 10, 1)} –í",
        f"üå°Ô∏è –í—Ö–æ–¥ –≤ –º–æ—Ç–æ—Ä:\t\t\t\t\t\t\t\t\t\t\t {round(payload.get('HTin', 0) / 10, 1)} ¬∞C",
        f"üå°Ô∏è –í—Ö–æ–¥ –≤ –º–∏–∫—Å–∫—É–ª–µ—Ä:\t\t {round(payload.get('LTin', 0) / 10, 1)} ¬∞C",
        "",  # <-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        f"‚ö†Ô∏è CommWarning: {payload.get('CommWarning')}",
        f"‚õîÔ∏è CommShutdown: {payload.get('CommShutdown')}",
        f"üü• CommBOC: {payload.get('CommBOC')}",
        f"üê¢ CommSlowStop: {payload.get('CommSlowStop')}",
        f"üîå CommMainsProt: {payload.get('CommMainsProt')}"
    ]

    return "\n".join(msg_lines)
