import os
import json
import time
import threading
import ssl
from datetime import datetime
import paho.mqtt.client as mqtt

from formatter import format_message
from bot_handler import send_message, set_latest_data

MQTT_BROKER = os.environ.get("MQTT_BROKER")
MQTT_PORT = int(os.environ.get("MQTT_PORT", 8883))
MQTT_TOPIC = os.environ.get("MQTT_TOPIC")
MQTT_USER = os.environ.get("MQTT_USER")
MQTT_PASS = os.environ.get("MQTT_PASS")

# MQTT callbacks
def on_connect(client, userdata, flags, rc):
    print(f"‚úÖ Connected to MQTT broker with result code {rc}")
    client.subscribe(MQTT_TOPIC)
    print(f"üì° Subscribed to topic: {MQTT_TOPIC}")

def on_message(client, userdata, msg):
    try:
        print(f"\nüì• MQTT TOPIC: {msg.topic}")
        payload_raw = msg.payload.decode()
        print(f"üì• RAW PAYLOAD: {payload_raw}")

        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        payload_json = json.loads(payload_raw)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if not isinstance(payload_json, dict):
            print("‚ùå MQTT ERROR: Payload is not a dictionary")
            return

        data = next(iter(payload_json.values()), {})
        if isinstance(data, str):
            data = json.loads(data)

        # –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç—ã—Ö payload
        if not isinstance(data, dict) or "payload" not in data:
            print("‚ö†Ô∏è MQTT: –ü—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
            return

        payload = data["payload"]
        if not isinstance(payload, dict):
            print("‚ö†Ô∏è MQTT: –ü—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî payload –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º")
            return

        if payload == {"nodata"} or payload == {0} or payload == {}:
            return  # –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_keys = ["ControllerMode","Eng_state","GeneratorP","Genset_kWh","RunningHours","battery_voltage"]
        if not all(k in payload for k in required_keys):
            print("‚ö†Ô∏è MQTT: –ü—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            return

        device_id = data.get("device_id", "unknown")
        timestamp = int(data.get("timestamp", time.time()))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        text = format_message(device_id, timestamp, payload)
        send_message(text)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        set_latest_data({
            "device_id": device_id,
            "timestamp": timestamp,
            "payload": payload
        })

    except json.JSONDecodeError as e:
        print("‚ùå MQTT ERROR: JSON decode error:", e)
    except Exception as e:
        print("‚ùå MQTT ERROR:", e)

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
def start_mqtt():
    client = mqtt.Client()
    client.username_pw_set(MQTT_USER, MQTT_PASS)

    # –í–∫–ª—é—á–µ–Ω–∏–µ TLS
    client.tls_set(cert_reqs=ssl.CERT_NONE)
    client.tls_insecure_set(True)

    client.on_connect = on_connect
    client.on_message = on_message

    print("üöÄ Connecting to MQTT broker...")
    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_forever()

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
def run():
    threading.Thread(target=start_mqtt, daemon=True).start()
