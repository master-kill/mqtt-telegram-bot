from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext
import os
from formatter import format_message

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ ParseMode
PARSE_MODE = 'Markdown'

BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
subscribers = {}
latest_data = {}

def send_message(text, user_ids=None):
    if user_ids is None:
        user_ids = list(subscribers.keys())
    bot = Bot(token=BOT_TOKEN)
    for user_id in user_ids:
        try:
            bot.send_message(chat_id=user_id, text=text, parse_mode=PARSE_MODE)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def set_latest_data(data):
    device_id = data.get("device_id", "unknown")
    latest_data[device_id] = data

    # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    user_ids = [uid for uid, devices in subscribers.items() if device_id in devices]
    text = format_message(device_id, data.get("timestamp"), data.get("payload", {}))
    send_message(text, user_ids)

def start(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    subscribers[user_id] = set()  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫
    update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
        "/subscribe <device_id> ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        "/unsubscribe <device_id> ‚Äî –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
        "/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
        "/my ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    )

def subscribe(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    if len(context.args) != 1:
        update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subscribe <device_id>")
        return
    device_id = context.args[0]
    subscribers.setdefault(user_id, set()).add(device_id)
    update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ `{device_id}` –∞–∫—Ç–∏–≤–Ω–∞", parse_mode=PARSE_MODE)

def unsubscribe(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    if len(context.args) != 1:
        update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsubscribe <device_id>")
        return
    device_id = context.args[0]
    if user_id in subscribers and device_id in subscribers[user_id]:
        subscribers[user_id].remove(device_id)
        update.message.reply_text(f"üö´ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç `{device_id}` –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", parse_mode=PARSE_MODE)
    else:
        update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")

def status(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    devices = subscribers.get(user_id)
    if not devices:
        update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        return
    for device_id in devices:
        data = latest_data.get(device_id)
        if data:
            text = format_message(device_id, data.get("timestamp"), data.get("payload", {}))
            update.message.reply_text(text, parse_mode=PARSE_MODE)
        else:
            update.message.reply_text(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ `{device_id}`", parse_mode=PARSE_MODE)

def my(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    devices = subscribers.get(user_id)
    if devices:
        update.message.reply_text(
            f"üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(f"- `{dev}`" for dev in devices),
            parse_mode=PARSE_MODE
        )
    else:
        update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫")

def start_bot():
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))
    dp.add_handler(CommandHandler("status", status))
    dp.add_handler(CommandHandler("my", my))

    updater.start_polling()
    print("‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω")
