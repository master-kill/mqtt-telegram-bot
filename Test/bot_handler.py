import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext
from data_store import latest_data, user_subscriptions
from formatter import format_message

BOT_TOKEN = os.environ.get("BOT_TOKEN")

def start(update: Update, context: CallbackContext):
    reply_markup = ReplyKeyboardMarkup([["/status"], ["/my_subscriptions"]], resize_keyboard=True)
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:", reply_markup=reply_markup)

def status(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_devices = subscriptions.get(chat_id)
    if not user_devices:
        update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe <device_id>")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    for device_id in user_devices:
        device_data = latest_data.get(device_id)
        if not device_data:
            update.message.reply_text(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}")
            continue

        msg = format_message(device_id, device_data["timestamp"], device_data["payload"])
        update.message.reply_text(msg, parse_mode="Markdown")

def subscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    if len(context.args) != 1:
        update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subscribe <device_id>")
        return

    device_id = context.args[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    if device_id not in latest_data:
        update.message.reply_text(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if chat_id not in subscriptions:
        subscriptions[chat_id] = set()

    subscriptions[chat_id].add(device_id)
    update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{device_id}'")

def my_subscriptions(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_devices = subscriptions.get(chat_id)

    if not user_devices:
        update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        devices_list = "\n".join(f"üîπ {dev}" for dev in user_devices)
        update.message.reply_text(f"üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n{devices_list}")

def send_message(text: str, chat_ids: list[int] = None):
    if not text:
        return

    if chat_ids is None:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
        chat_ids = [chat_id for chat_id in subscriptions]

    for chat_id in chat_ids:
        try:
            bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")
        except Exception as e:
            print(f"Telegram ERROR for chat_id {chat_id}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
updater = Updater(BOT_TOKEN)
bot = updater.bot

updater.dispatcher.add_handler(CommandHandler("start", start))
updater.dispatcher.add_handler(CommandHandler("status", status))
updater.dispatcher.add_handler(CommandHandler("subscribe", subscribe))
updater.dispatcher.add_handler(CommandHandler("my_subscriptions", my_subscriptions))

def start_bot():
    updater.start_polling()
