import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram.constants import ParseMode
from formatter import format_message
from data_store import get_latest_data

# Telegram config
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–ø–∏—Å–æ–∫
latest_data = {}
subscribed_users = {}

def set_latest_data(data: dict):
    global latest_data
    latest_data = data

def get_latest_data():
    return latest_data

def send_message(text):
    from telegram import Bot
    bot = Bot(token=BOT_TOKEN)
    for chat_id in subscribed_users.keys():
        try:
            bot.send_message(chat_id=chat_id, text=text, parse_mode='Markdown')
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")

def start(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    device_id = get_latest_data().get("device_id", "Carlsberg")

    if user_id not in subscribed_users:
        subscribed_users[user_id] = set()

    subscribed_users[user_id].add(device_id)

    keyboard = [["/status"], ["/subscriptions"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        f"üì° –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: *{device_id}*",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def status(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    data = get_latest_data()

    if user_id not in subscribed_users:
        update.message.reply_text("‚õîÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    if not data:
        update.message.reply_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç.")
        return

    text = format_message(data["device_id"], data["timestamp"], data["payload"])
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def subscriptions(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    if user_id not in subscribed_users:
        update.message.reply_text("‚õîÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
        return

    devices = subscribed_users[user_id]
    if not devices:
        update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    device_list = "\n".join(f"üîπ {d}" for d in devices)
    update.message.reply_text(f"üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n{device_list}")

def start_bot():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("status", status))
    dp.add_handler(CommandHandler("subscriptions", subscriptions))

    print("ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω")
    updater.start_polling()
    updater.idle()
