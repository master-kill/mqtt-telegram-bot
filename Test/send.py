import os
import requests
from datetime import datetime

BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")

def send_message(text: str):
    if not BOT_TOKEN or not CHAT_ID:
        print("Telegram credentials not set")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        response = requests.post(url, json=payload)
        print(f"Telegram response: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"Telegram send error: {e}")


def format_payload(device_id, payload, timestamp=None) -> str:
    if timestamp:
        try:
            formatted_time = datetime.fromtimestamp(timestamp + 3 * 3600).strftime("%d.%m.%Y %H:%M:%S")
        except Exception:
            formatted_time = str(timestamp)
    else:
        formatted_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    eng_state_code = payload.get("Eng_state", -1)
    controller_mode_code = payload.get("ControllerMode", -1)

    eng_state_map = {
        1: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
        2: "–ù–µ –≥–æ—Ç–æ–≤",
        6: "–ó–∞–ø—É—Å–∫",
        7: "–í —Ä–∞–±–æ—Ç–µ",
        8: "–ù–∞–≥—Ä—É–∂–µ–Ω–∞",
        9: "–†–∞–∑–≥—Ä—É–∑–∫–∞",
        10: "–†–∞—Å—Ö–æ–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
        11: "–û—Å—Ç–∞–Ω–æ–≤–∫–∞",
        15: "–ù–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è",
        19: "–ü—Ä–æ–≥—Ä–µ–≤"
    }

    ControllerMode_map = {
        0: "OFF",
        1: "–†—É—á–Ω–æ–π",
        2: "–ê–í–¢–û",
        3: "–¢–µ—Å—Ç"
    }

    msg_lines = [
        f"üè≠ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_id}",
        f"‚è±Ô∏è –í—Ä–µ–º—è: {formatted_time}",
        "",
        f"üïπÔ∏è –†–µ–∂–∏–º: {ControllerMode_map.get(controller_mode_code, f'–∫–æ–¥ {controller_mode_code}')}",
        f"üö¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {eng_state_map.get(eng_state_code, f'–∫–æ–¥ {eng_state_code}')}",
        "",
        f"‚ö°Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞ : {payload.get('GeneratorP')} –∫–í—Ç",
        f"üî¢ –°—á—ë—Ç—á–∏–∫: {payload.get('Genset_kWh')} –∫–í—Ç¬∑—á",
        f"‚è≥ –ù–∞—Ä–∞–±–æ—Ç–∫–∞: {round(payload.get('RunningHours', 0) / 10)} —á",
        f"üîã –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∞–∫–±: {round(payload.get('battery_voltage', 0) / 10, 1)} –í",
        f"üå°Ô∏è –í—Ö–æ–¥ –≤ –º–æ—Ç–æ—Ä: {round(payload.get('HTin', 0) / 10, 1)} ¬∞C",
        f"üå°Ô∏è –í—Ö–æ–¥ –≤ –º–∏–∫—Å–∫—É–ª–µ—Ä: {round(payload.get('LTin', 0) / 10, 1)} ¬∞C",
        "",
        f"‚ö†Ô∏è CommWarning: {payload.get('CommWarning')}",
        f"‚õîÔ∏è CommShutdown: {payload.get('CommShutdown')}",
        f"üü• CommBOC: {payload.get('CommBOC')}",
        f"üê¢ CommSlowStop: {payload.get('CommSlowStop')}",
        f"üîå CommMainsProt: {payload.get('CommMainsProt')}"
    ]

    return "\n".join(msg_lines)
