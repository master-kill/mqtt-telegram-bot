from data_store import get_subscriptions, add_subscription, remove_subscription

def subscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if len(context.args) != 1:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: /subscribe <device_id>")
        return

    device_id = context.args[0]
    if device_id not in latest_data:
        update.message.reply_text(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    add_subscription(chat_id, device_id)
    update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")

def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if len(context.args) != 1:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: /unsubscribe <device_id>")
        return

    device_id = context.args[0]
    remove_subscription(chat_id, device_id)
    update.message.reply_text(f"üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} —É–¥–∞–ª–µ–Ω–∞")

def my_subscriptions(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    subs = get_subscriptions(chat_id)
    if not subs:
        update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        update.message.reply_text("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(f"‚Ä¢ {s}" for s in subs))
