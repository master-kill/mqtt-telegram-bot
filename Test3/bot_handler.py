# bot_handler.py
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext
from formatter import format_message
from data_store import latest_data, subscriptions, load_subscriptions_from_sheets, save_subscriptions_to_sheets

def start(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/subscribe <device_id> ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        "/unsubscribe <device_id> ‚Äî –æ—Ç–ø–∏—Å–∫–∞\n"
        "/my ‚Äî –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    )
def subscribe(update: Update, context: CallbackContext):
    if len(context.args) != 1:
        update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subscribe <device_id>")
        return

    user_id = str(update.message.chat_id)
    device_id = context.args[0]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ latest_data
    if device_id not in latest_data:
        update.message.reply_text(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    subscriptions.setdefault(user_id, [])
    if device_id not in subscriptions[user_id]:
        subscriptions[user_id].append(device_id)
        save_subscriptions_to_sheets()
        update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        update.message.reply_text(f"‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {device_id}.")

def unsubscribe(update: Update, context: CallbackContext):
    if len(context.args) != 1:
        update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsubscribe <device_id>")
        return

    user_id = str(update.message.chat_id)
    device_id = context.args[0]

    if user_id in subscriptions and device_id in subscriptions[user_id]:
        subscriptions[user_id].remove(device_id)
        save_subscriptions_to_sheets()
        update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {device_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        update.message.reply_text(f"‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {device_id}.")

def my_subscriptions(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)
    if user_id in subscriptions and subscriptions[user_id]:
        subs = "\n".join(subscriptions[user_id])
        update.message.reply_text(f"üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n{subs}")
    else:
        update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")

def status(update: Update, context: CallbackContext):
    if len(context.args) != 1:
        update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <device_id>")
        return

    device_id = context.args[0]

    if device_id in latest_data:
        payload_info = latest_data[device_id]
        msg = format_message(device_id, payload_info["timestamp"], payload_info["payload"])
        update.message.reply_text(msg, parse_mode="Markdown")
    else:
        update.message.reply_text(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}")

def send_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    from app import updater
    for user_id, devices in subscriptions.items():
        for device_id in devices:
            if device_id in text:
                try:
                    updater.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def start_bot(token):
    load_subscriptions_from_sheets()

    updater = Updater(token=token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))
    dp.add_handler(CommandHandler("my_subscriptions", my_subscriptions))
    dp.add_handler(CommandHandler("status", status))

    updater.start_polling()
    updater.idle()
